{"version":3,"sources":["game/utils.js","../node_modules/lodash/_baseClamp.js","../node_modules/lodash/isObject.js","../node_modules/lodash/_freeGlobal.js","../node_modules/lodash/_root.js","../node_modules/lodash/_Symbol.js","../node_modules/lodash/_getRawTag.js","../node_modules/lodash/_objectToString.js","../node_modules/lodash/_baseGetTag.js","../node_modules/lodash/isObjectLike.js","../node_modules/lodash/isSymbol.js","../node_modules/lodash/toNumber.js","../node_modules/lodash/clamp.js","../node_modules/lodash/isNil.js","colors.js","sprites.js","alphabet.js","print.js","canvasApi.js","game/terrain.js","game/input.js","game/update.js","game/draw.js","game/explosion.js","game/bombs.js","game/game.js","index.js"],"names":["getPhysicsObjects","player","bombs","concat","createPhysicsObject","x","y","sprite","previous","position","radius","grounded","colors","rgbs","triplets","rgb","i","length","triplet","lookup","current","sprites","alphabet","a","b","c","d","e","f","g","h","j","k","l","m","n","o","p","q","r","s","t","u","v","w","z","printText","letters","ctx","color","toString","split","map","letter","pixels","toLowerCase","width","reduce","acc","index","xOffset","yOffset","filter","forEach","grid","imageData","getImageData","data","pixel","pixelIndex","offset","putImageData","canvas","document","getElementById","getContext","focus","_cameraX","_cameraY","camera","Math","floor","setTransform","translate","setPixel","fillStyle","fillRect","spriteIndex","darken","flipH","flipV","slice","cells","rowIndex","colIndex","clamped","print","ty","clear","save","clearRect","restore","panelHeight","panelWidth","terrainStart","lowestPanel","terrain","createPanel","panel","stones","row","push","random","updateTerrain","cameraY","panelTop","panelBottom","terrainAt","panelNumber","setTerrainAt","value","panelY","colorAt","stone","dx","dy","distance","sqrt","cutTerrain","cx","cy","drawTerrain","top","max","bottom","runSpeed","airSpeed","jumpSpeed","handleInput","input","speed","left","right","jumpReady","upPressed","gravity","cameraMomentum","cameraLag","maxSpeed","groundFriction","updatePhysicsObjects","objects","obj","vx","vy","first","second","amount","nx","ny","handleTerrainCollisions","totalX","totalY","count","PI","cos","sin","displacement","updateCamera","state","previousCameraY","cameraDiff","updateScore","score","drawPhysicsObjects","drawScoreMarker","drawInstructions","drawScore","scoreText","substring","startingRadius","animationSpeed","explosions","newExplosion","delay","updateExplosions","remainingExplosions","explosion","drawExplosions","fuzeTime","fuzeSpeed","bombRadius","knockBack","spawnBombs","updateBombs","bombsToExplode","remainingBombs","bomb","undefined","timeLeft","fuze","physicsObjects","object","location","reload","lengthSquared","initialState","update","updateFunctions","bombFunctions","draw","drawFunctions","currentKeys","Set","addEventListener","event","add","key","preventDefault","delete","previousInput","loop","keyNames","has","requestAnimationFrame"],"mappings":"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","file":"src.b10bddd3.map","sourceRoot":"src","sourcesContent":["export function getPhysicsObjects({ player, bombs }) {\r\n  return [player].concat(bombs);\r\n}\r\n\r\nexport function createPhysicsObject(x, y, sprite) {\r\n  return {\r\n    previous: {\r\n      x,\r\n      y\r\n    },\r\n    position: {\r\n      x,\r\n      y\r\n    },\r\n    radius: 4,\r\n    sprite,\r\n    grounded: false\r\n  };\r\n}\r\n","/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nmodule.exports = baseClamp;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var baseClamp = require('./_baseClamp'),\n    toNumber = require('./toNumber');\n\n/**\n * Clamps `number` within the inclusive `lower` and `upper` bounds.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Number\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n * @example\n *\n * _.clamp(-10, -5, 5);\n * // => -5\n *\n * _.clamp(10, -5, 5);\n * // => 5\n */\nfunction clamp(number, lower, upper) {\n  if (upper === undefined) {\n    upper = lower;\n    lower = undefined;\n  }\n  if (upper !== undefined) {\n    upper = toNumber(upper);\n    upper = upper === upper ? upper : 0;\n  }\n  if (lower !== undefined) {\n    lower = toNumber(lower);\n    lower = lower === lower ? lower : 0;\n  }\n  return baseClamp(toNumber(number), lower, upper);\n}\n\nmodule.exports = clamp;\n","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nmodule.exports = isNil;\n","// TODO: consolidate - avoid duplication\r\nconst rgbs = [\r\n  'rgb(246,214,189)',\r\n  'rgb(195,163,138)',\r\n  'rgb(153,117,119)',\r\n  'rgb(129,98,113)',\r\n  'rgb(78,73,95)',\r\n  'rgb(32,57,79)',\r\n  'rgb(15,42,63)',\r\n  'rgb(8,20,30)'\r\n];\r\n\r\nconst triplets = [\r\n  [246, 214, 189],\r\n  [195, 163, 138],\r\n  [153, 117, 119],\r\n  [129, 98, 113],\r\n  [78, 73, 95],\r\n  [32, 57, 79],\r\n  [15, 42, 63],\r\n  [8, 20, 30]\r\n];\r\n\r\n// const hexes = [\r\n//   '#f6d6bd',\r\n//   '#c3a38a',\r\n//   '#997577',\r\n//   '#816271',\r\n//   '#4e495f',\r\n//   '#20394f',\r\n//   '#0f2a3f',\r\n//   '#08141e'\r\n// ]\r\n\r\nconst colors = {\r\n  rgb (i) {\r\n    return rgbs[i % rgbs.length];\r\n  },\r\n  triplet (i) {\r\n    return triplets[i % triplets.length];\r\n  },\r\n\r\n  // NOTE: if triplet isn't a color in the pallet, this will return undefined.\r\n  lookup (triplet) {\r\n    for (let i = 0; i < triplets.length; i++) {\r\n      let current = triplets[i];\r\n      if (current[0] === triplet[0] &&\r\n          current[1] === triplet[1] &&\r\n          current[2] === triplet[2]) {\r\n        return i;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport default colors;\r\n","const sprites = {\r\n  \"0\": [\r\n    \"  3333  \",\r\n    \" 333333 \",\r\n    \"33333333\",\r\n    \"33333333\",\r\n    \"33333333\",\r\n    \"33333333\",\r\n    \" 333333 \",\r\n    \"  3333  \"\r\n  ],\r\n  \"1\": [\r\n    \"5       \",\r\n    \"65      \",\r\n    \"465     \",\r\n    \"3465    \",\r\n    \"3465    \",\r\n    \"465     \",\r\n    \"65      \",\r\n    \"5       \"\r\n  ],\r\n  \"2\": [\r\n    \"  6666  \",\r\n    \" 664466 \",\r\n    \"66644666\",\r\n    \"66644666\",\r\n    \"66644666\",\r\n    \"66666666\",\r\n    \" 664466 \",\r\n    \"  6666  \"\r\n  ],\r\n  \"3\": [\r\n    \"  4444  \",\r\n    \" 442244 \",\r\n    \"44422444\",\r\n    \"44422444\",\r\n    \"44422444\",\r\n    \"44444444\",\r\n    \" 442244 \",\r\n    \"  4444  \"\r\n  ]\r\n};\r\n\r\nexport default sprites;\r\n","const alphabet = {\r\n  '<': [\r\n    0, 0, 1,\r\n    0, 1, 0,\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n    0, 0, 0,\r\n  ],\r\n  '>': [\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n    0, 1, 0,\r\n    1, 0, 0,\r\n    0, 0, 0,\r\n  ],\r\n  '/': [\r\n    0, 0, 0,\r\n    0, 0, 1,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    1, 0, 0,\r\n    0, 0, 0,\r\n  ],\r\n  ':': [\r\n    0, 0, 0,\r\n    0, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 0,\r\n  ],\r\n  '|': [\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 0, 0,\r\n  ],\r\n  '(': [\r\n    0, 1,\r\n    1, 0,\r\n    1, 0,\r\n    1, 0,\r\n    0, 1,\r\n    0, 0,\r\n  ],\r\n  ')': [\r\n    1, 0,\r\n    0, 1,\r\n    0, 1,\r\n    0, 1,\r\n    1, 0,\r\n    0, 0,\r\n  ],\r\n  0: [\r\n    0, 1, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0,\r\n  ],\r\n  1: [\r\n    1, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    1, 1, 1,\r\n    0, 0, 0,\r\n  ],\r\n  2: [\r\n    1, 1, 1,\r\n    0, 0, 1,\r\n    1, 1, 1,\r\n    1, 0, 0,\r\n    1, 1, 1,\r\n    0, 0, 0,\r\n  ],\r\n  3: [\r\n    1, 1, 1,\r\n    0, 0, 1,\r\n    0, 1, 1,\r\n    0, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0,\r\n  ],\r\n  4: [\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n    0, 0, 0,\r\n  ],\r\n  5: [\r\n    1, 1, 1,\r\n    1, 0, 0,\r\n    1, 1, 1,\r\n    0, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0,\r\n  ],\r\n  6: [\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0,\r\n  ],\r\n  7: [\r\n    1, 1, 1,\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n    0, 0, 0,\r\n  ],\r\n  8: [\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0,\r\n  ],\r\n  9: [\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n    0, 0, 0,\r\n  ],\r\n\r\n  ' ': [\r\n    0, 0,\r\n    0, 0,\r\n    0, 0,\r\n    0, 0,\r\n    0, 0,\r\n    0, 0\r\n  ],\r\n  '.': [\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    1,\r\n    0,\r\n  ],\r\n  ',': [\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    1,\r\n    1,\r\n  ],\r\n  '+': [\r\n    0, 0, 0,\r\n    0, 1, 0,\r\n    1, 1, 1,\r\n    0, 1, 0,\r\n    0, 0, 0,\r\n    0, 0, 0\r\n  ],\r\n  '-': [\r\n    0, 0, 0,\r\n    0, 0, 0,\r\n    1, 1, 1,\r\n    0, 0, 0,\r\n    0, 0, 0,\r\n    0, 0, 0\r\n  ],\r\n  '!': [\r\n    1,\r\n    1,\r\n    1,\r\n    0,\r\n    1,\r\n    0,\r\n  ],\r\n  '?': [\r\n    1, 1,\r\n    0, 1,\r\n    1, 1,\r\n    0, 0,\r\n    1, 0,\r\n    0, 0,\r\n  ],\r\n  a: [\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    0, 0, 0\r\n  ],\r\n  b: [\r\n    1, 1, 0,\r\n    1, 0, 1,\r\n    1, 1, 0,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  c: [\r\n    1, 1, 1,\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  d: [\r\n    1, 1, 0,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  e: [\r\n    1, 1, 1,\r\n    1, 0, 0,\r\n    1, 1, 1,\r\n    1, 0, 0,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  f: [\r\n    1, 1, 1,\r\n    1, 0, 0,\r\n    1, 1, 1,\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    0, 0, 0\r\n  ],\r\n  g: [\r\n    1, 1, 1,\r\n    1, 0, 0,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  h: [\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    0, 0, 0\r\n  ],\r\n  i: [\r\n    1, 1, 1,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  j: [\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n    0, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  k: [\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 0,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    0, 0, 0\r\n  ],\r\n  l: [\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  m: [\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    0, 0, 0\r\n  ],\r\n  n: [\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    0, 0, 0\r\n  ],\r\n  o: [\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  p: [\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    1, 0, 0,\r\n    1, 0, 0,\r\n    0, 0, 0\r\n  ],\r\n  q: [\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    0, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  r: [\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    1, 1, 0,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    0, 0, 0\r\n  ],\r\n  s: [\r\n    1, 1, 1,\r\n    1, 0, 0,\r\n    1, 1, 1,\r\n    0, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  t: [\r\n    1, 1, 1,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 1, 0,\r\n    0, 0, 0\r\n  ],\r\n  u: [\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  v: [\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 0,\r\n    0, 0, 0\r\n  ],\r\n  w: [\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    1, 1, 1,\r\n    1, 0, 1,\r\n    0, 0, 0\r\n  ],\r\n  x: [\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    0, 1, 0,\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    0, 0, 0\r\n  ],\r\n  y: [\r\n    1, 0, 1,\r\n    1, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 1,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n  z: [\r\n    1, 1, 1,\r\n    0, 0, 1,\r\n    0, 1, 0,\r\n    1, 0, 0,\r\n    1, 1, 1,\r\n    0, 0, 0\r\n  ],\r\n};\r\n\r\nexport default alphabet;\r\n","import colors from './colors.js';\r\nimport alphabet from './alphabet.js';\r\n\r\nconst printText = ({ x, y, letters, c, ctx }) => {\r\n  const color = colors.triplet(c);\r\n\r\n  const grids = letters\r\n    .toString()\r\n    // Split into individual letters.\r\n    .split('')\r\n    // Get the pixels and the letter's width.\r\n    .map(letter => {\r\n      const pixels = alphabet[letter.toLowerCase()];\r\n      return {\r\n        // If we found a matching letter in the alphabet,\r\n        // return its width.\r\n        // Otherwise if the user tries to print a character\r\n        // we haven't defined, just return 3.\r\n        width: pixels ? pixels.length / 6 : 3,\r\n        letter,\r\n        pixels\r\n      };\r\n    })\r\n    // Calculate running offsets.\r\n    .reduce((acc, current, index) => {\r\n      const previous = acc[index - 1];\r\n      const xOffset = previous ? previous.width + 1 + previous.xOffset : 0;\r\n      const yOffset = previous ? previous.yOffset : 0;\r\n\r\n      return [\r\n        ...acc,\r\n        {\r\n          ...current,\r\n          xOffset,\r\n          yOffset\r\n        }\r\n      ];\r\n    }, [])\r\n    // Ignore letters with no matches.\r\n    .filter(d => d.pixels);\r\n\r\n  // For each grid of pixels,\r\n  grids.forEach(grid => {\r\n    // get some properties,\r\n    const { pixels, xOffset, yOffset, width } = grid;\r\n\r\n    // get the image data this letter will occupy,\r\n    const imageData = ctx.getImageData(x + xOffset, y + yOffset, width, 6);\r\n    const { data } = imageData;\r\n\r\n    // and for each pixel,\r\n    pixels\r\n      .map((pixel, pixelIndex) => ({ pixel, pixelIndex }))\r\n      // ignore pixels set to 0,\r\n      .filter(d => d.pixel)\r\n      // and update the underlying canvas data.\r\n      .forEach(d => {\r\n        const offset = d.pixelIndex * 4;\r\n        data[offset + 0] = color[0];\r\n        data[offset + 1] = color[1];\r\n        data[offset + 2] = color[2];\r\n        data[offset + 3] = 255;\r\n      });\r\n\r\n    // And draw!\r\n    ctx.putImageData(imageData, x + xOffset, y + yOffset);\r\n  });\r\n};\r\n\r\nexport default printText;\r\n","import clamp from 'lodash/clamp';\r\nimport isNil from 'lodash/isNil';\r\n\r\nimport colors from './colors';\r\nimport sprites from \"./sprites\";\r\nimport printText from \"./print\";\r\n\r\nlet canvas = document.getElementById('game');\r\nlet ctx = canvas.getContext('2d');\r\n\r\ncanvas.focus();\r\n\r\nlet _cameraX = 0;\r\nlet _cameraY = 0;\r\n\r\nexport function camera(x = 0, y = 0) {\r\n  _cameraX = Math.floor(x);\r\n  _cameraY = Math.floor(y);\r\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n  ctx.translate(-_cameraX, -_cameraY);\r\n}\r\n\r\nexport function setPixel(x, y, c = 0) {\r\n  ctx.fillStyle = colors.rgb(c);\r\n  ctx.fillRect(Math.floor(x), Math.floor(y), 1, 1);\r\n}\r\n\r\nexport function sprite(x, y, spriteIndex, darken = 0, flipH = false, flipV = false) {\r\n  if (x < _cameraX - 8 || x > _cameraX + 128) return;\r\n  if (y < _cameraY - 8 || y > _cameraY + 128) return;\r\n\r\n  if (sprites[spriteIndex]) {\r\n    sprites[spriteIndex].slice(0, 8).forEach((cells, rowIndex) => {\r\n      cells.split('').forEach((color, colIndex) => {\r\n        if (color !== ' ') {\r\n          const clamped = clamp(+color - darken, 0, 7);\r\n          ctx.fillStyle = colors.rgb(clamped);\r\n          ctx.fillRect(\r\n            Math.floor(x) + (flipH ? 7 - colIndex : colIndex),\r\n            Math.floor(y) + (flipV ? 7 - rowIndex : rowIndex),\r\n            1,\r\n            1\r\n          );\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport function print(x, y, letters, c = 0) {\r\n  let ty = y - _cameraY;\r\n  if (ty < -8 || ty > 128) return;\r\n  printText({\r\n    x: x - _cameraX,\r\n    y: ty,\r\n    letters,\r\n    c,\r\n    ctx\r\n  });\r\n}\r\n\r\nexport function clear(c) {\r\n  ctx.save();\r\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n  if (!isNil(c)) {\r\n    ctx.fillStyle = colors.rgb(c);\r\n    ctx.fillRect(0, 0, 128, 128);\r\n  } else {\r\n    ctx.clearRect(0, 0, 128, 128);\r\n  }\r\n  ctx.restore();\r\n}\r\n","import { setPixel } from \"../canvasApi\";\r\n\r\nconst panelHeight = 100;\r\nconst panelWidth = 128;\r\nconst terrainStart = 70;\r\n\r\nlet lowestPanel = 0;\r\nlet terrain = {};\r\n\r\nfunction createPanel() {\r\n  let panel = [];\r\n  let stones = [];\r\n  for (let y = 0; y < 100; y++) {\r\n    let row = [];\r\n    for (let x = 0; x < 128; x++) {\r\n      row.push(true);\r\n    }\r\n    panel.push(row);\r\n  }\r\n\r\n  for (let i = 0; i < 10; i++) {\r\n    if (Math.random() * 100 < 40) {\r\n      stones.push({\r\n        x: Math.random() * 128,\r\n        y: Math.random() * panelHeight,\r\n        r: Math.random() * 5,\r\n        c: Math.floor(Math.random() * 3) + 4\r\n      });\r\n    }\r\n  }\r\n  panel.stones = stones;\r\n  return panel;\r\n}\r\n\r\nexport function updateTerrain(cameraY) {\r\n  let panelTop = Math.floor(cameraY / panelHeight) - 1;\r\n  let panelBottom = panelTop + 5;\r\n\r\n  for (let i = panelTop; i < panelBottom; i++) {\r\n    if (!terrain[i]) {\r\n      terrain[i] = createPanel();\r\n      if (lowestPanel < i) lowestPanel = i;\r\n    }\r\n  }\r\n}\r\n\r\nexport function terrainAt(x, y) {\r\n  if (y < terrainStart) return false;\r\n  let panelNumber = Math.floor(y / panelHeight);\r\n  let panel = terrain[panelNumber];\r\n  let panelY = y - (panelNumber * panelHeight);\r\n  if (panel && panelNumber != lowestPanel) {\r\n    return panel[panelY][x];\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function setTerrainAt(x, y, value) {\r\n  let panelNumber = Math.floor(y / panelHeight);\r\n  let panel = terrain[panelNumber];\r\n\r\n  if (panel) {\r\n    let panelY = y - (panelNumber * panelHeight);\r\n    let row = panel[panelY];\r\n    if (x >= 0 && x < row.length) {\r\n      row[x] = value;\r\n    }\r\n  }\r\n}\r\n\r\nexport function colorAt(x, y) {\r\n  let panelNumber = Math.floor(y / panelHeight);\r\n  let panel = terrain[panelNumber];\r\n  let panelY = y - (panelNumber * panelHeight);\r\n\r\n  if (!panel) return 7;\r\n\r\n  for (let stone of panel.stones) {\r\n    let dx = stone.x - x;\r\n    let dy = stone.y - panelY;\r\n    let distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n    if (distance < stone.r) {\r\n      return stone.c;\r\n    }\r\n  }\r\n\r\n  let color = 1;\r\n  if (!terrainAt(x, y - 1)) {\r\n    color -= 1;\r\n  } else if (!terrainAt(x, y + 1)) {\r\n    color += 1;\r\n  }\r\n  return color;\r\n}\r\n\r\nexport function cutTerrain(x, y, r) {\r\n  for (let cx = Math.floor(x - r); cx <= x + r; cx++) {\r\n    for (let cy = Math.floor(y - r); cy <= y + r; cy++) {\r\n      let dx = cx - x;\r\n      let dy = cy - y;\r\n      let cr = Math.floor(Math.sqrt(dx * dx + dy * dy));\r\n\r\n      if (cr > r) continue;\r\n      setTerrainAt(cx, cy, false);\r\n    }\r\n  }\r\n}\r\n\r\nexport function drawTerrain(cameraY) {\r\n  let top = Math.max(0, Math.floor(cameraY));\r\n  let bottom = Math.floor(cameraY + 128);\r\n  for (let y = top; y < bottom; y++) {\r\n    for (let x = 0; x < panelWidth - 1; x++) {\r\n      if (terrainAt(x, y)) {\r\n        setPixel(x, y, colorAt(x, y));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { cutTerrain } from \"./terrain\";\r\n\r\nconst runSpeed = 0.05;\r\nconst airSpeed = 0.01;\r\nconst jumpSpeed = 2;\r\n\r\nexport function handleInput(input, player, terrain) {\r\n  let speed = player.grounded ? runSpeed : airSpeed;\r\n  if (input.left) {\r\n    player.position.x -= speed;\r\n  }\r\n  if (input.right) {\r\n    player.position.x += speed;\r\n  }\r\n\r\n  if (player.grounded) {\r\n    player.jumpReady = true;\r\n  }\r\n\r\n  if (input.upPressed && player.jumpReady) {\r\n    player.previous.y += jumpSpeed;\r\n    player.jumpReady = false;\r\n  }\r\n\r\n  if (input.a) {\r\n    cutTerrain(player.position.x, player.position.y, 30);\r\n  }\r\n}\r\n","import { terrainAt } from \"./terrain\";\r\n\r\nconst gravity = 0.07;\r\nconst cameraMomentum = 0.8;\r\nconst cameraLag = 0.2;\r\nconst maxSpeed = 5;\r\nconst groundFriction = 0.99;\r\n\r\nexport function updatePhysicsObjects(objects) {\r\n  for (const obj of objects) {\r\n    let vx = obj.position.x - obj.previous.x;\r\n    let vy = obj.position.y - obj.previous.y;\r\n\r\n    let speed = Math.sqrt(vx * vx + vy * vy);\r\n    if (speed > maxSpeed) {\r\n      vx = vx * maxSpeed / speed;\r\n      vy = vy * maxSpeed / speed;\r\n    } else if(obj.grounded) {\r\n      vx = vx * groundFriction;\r\n      vy = vy * groundFriction;\r\n    }\r\n\r\n    obj.previous.x = obj.position.x;\r\n    obj.previous.y = obj.position.y;\r\n    vy += gravity;\r\n\r\n    obj.position.x += vx;\r\n    obj.position.y += vy;\r\n\r\n    if (obj.position.x - obj.radius < 0) {\r\n      obj.position.x = obj.radius;\r\n    }\r\n\r\n    if (obj.position.x + obj.radius > 128) {\r\n      obj.position.x = 128 - obj.radius;\r\n    }\r\n  }\r\n\r\n  for (const first of objects) {\r\n    for (const second of objects) {\r\n      if (first == second) continue;\r\n      let dx = first.position.x - second.position.x;\r\n      let dy = first.position.y - second.position.y;\r\n\r\n      let distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      if (distance < first.radius + second.radius) {\r\n        if (dy < 0) first.grounded = true;\r\n        else second.grounded = true;\r\n        let amount = first.radius + second.radius - distance;\r\n\r\n        let nx = dx / distance;\r\n        let ny = dy / distance;\r\n\r\n        first.position.x += nx * amount / 2;\r\n        first.position.y += ny * amount / 2;\r\n        second.position.x -= nx * amount / 2;\r\n        second.position.y -= ny * amount / 2;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function handleTerrainCollisions(terrain, objects) {\r\n  for (let i = 0; i < 5; i++) {\r\n    for (const obj of objects) {\r\n      let totalX = 0;\r\n      let totalY = 0;\r\n      let count = 0;\r\n      for (let r = 0; r < Math.PI * 2; r += Math.PI / 8) {\r\n        let dx = Math.cos(r) * obj.radius;\r\n        let dy = Math.sin(r) * obj.radius;\r\n        let x = Math.floor(obj.position.x + dx);\r\n        let y = Math.floor(obj.position.y + dy);\r\n\r\n        if (terrainAt(x, y, terrain)) {\r\n          if (dy > 3) {\r\n            obj.grounded = true;\r\n          }\r\n          totalX += dx;\r\n          totalY += dy;\r\n          count++;\r\n        }\r\n      }\r\n      if (count == 0) {\r\n        obj.grounded = false;\r\n        continue;\r\n      }\r\n\r\n      let dx = totalX / count;\r\n      let dy = totalY / count;\r\n\r\n      let length = Math.sqrt(dx * dx + dy * dy);\r\n      let nx = dx / length;\r\n      let ny = dy / length;\r\n\r\n      let displacement = obj.radius - length;\r\n\r\n      obj.position.x -= nx * displacement * 0.3;\r\n      obj.position.y -= ny * displacement * 0.3;\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateCamera(state) {\r\n  if (state.previousCameraY) {\r\n    let vy = state.cameraY - state.previousCameraY;\r\n    state.previousCameraY = state.cameraY;\r\n    state.cameraY += vy * cameraMomentum;\r\n  }\r\n\r\n  if (state.player.position.y > state.cameraY + 96) {\r\n    let cameraDiff = state.player.position.y - (state.cameraY + 96);\r\n    state.cameraY += cameraDiff * cameraLag;\r\n  }\r\n\r\n  if (state.player.position.y < state.cameraY + 32) {\r\n    let cameraDiff = state.player.position.y - (state.cameraY + 32);\r\n    state.cameraY += cameraDiff * 0.2;\r\n  }\r\n\r\n  if (!state.previousCameraY) {\r\n    state.previousCameraY = state.cameraY;\r\n  }\r\n}\r\n\r\nexport function updateScore(state) {\r\n  if (state.player.position.y > state.score) {\r\n    state.score = state.player.position.y;\r\n  }\r\n}\r\n","import { setPixel, sprite, print, camera } from \"../canvasApi\";\r\nimport { terrainAt } from \"./utils\";\r\n\r\nexport function drawPhysicsObjects(objects) {\r\n  for (let obj of objects) {\r\n    sprite(obj.position.x - obj.radius, obj.position.y - obj.radius, obj.sprite);\r\n  }\r\n}\r\n\r\nexport function drawScoreMarker({ score }) {\r\n  sprite(0, score, 1);\r\n  sprite(120, score, 1, 0, true);\r\n}\r\n\r\nexport function drawInstructions() {\r\n  print(5, 5, \"left/right to move\");\r\n  print(5, 13, \"up to jump\");\r\n}\r\n\r\nexport function drawScore({ cameraY, score }) {\r\n  camera();\r\n  let scoreText = Math.max(score - 68, 0).toString();\r\n  if (scoreText.length > 5) scoreText = scoreText.substring(0, 5);\r\n  print(5, 120, scoreText, 6);\r\n}\r\n","import { setPixel } from \"../canvasApi\";\r\n\r\nconst startingRadius = 30;\r\nconst animationSpeed = 2;\r\n\r\nlet explosions = [];\r\n\r\nexport function newExplosion(x, y) {\r\n  explosions.push({\r\n    x,\r\n    y,\r\n    r: startingRadius,\r\n    c: 0,\r\n    delay: 5\r\n  });\r\n}\r\n\r\nexport function updateExplosions() {\r\n  let remainingExplosions = [];\r\n\r\n  for (let explosion of explosions) {\r\n    if (explosion.delay > 0) {\r\n      explosion.delay--;\r\n      remainingExplosions.push(explosion)\r\n    } else {\r\n      if (explosion.c == 7) continue;\r\n      remainingExplosions.push(explosion);\r\n      explosion.c += 1;\r\n      explosion.r *= 0.8;\r\n      explosion.delay = animationSpeed;\r\n    }\r\n  }\r\n\r\n  explosions = remainingExplosions;\r\n}\r\n\r\nexport function drawExplosions() {\r\n  for (let explosion of explosions) {\r\n    for (let x = explosion.x - explosion.r; x < explosion.x + explosion.r; x++) {\r\n      for (let y = explosion.y - explosion.r; y < explosion.y + explosion.r; y++) {\r\n        let dx = x - explosion.x;\r\n        let dy = y - explosion.y;\r\n        let dist = Math.sqrt(dx * dx + dy * dy);\r\n\r\n        if (dist <= explosion.r) {\r\n          setPixel(x, y, explosion.c);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { getPhysicsObjects, createPhysicsObject } from \"./utils\";\r\nimport { cutTerrain } from \"./terrain\";\r\nimport { newExplosion } from \"./explosion\";\r\n\r\nconst fuzeTime = 100;\r\nconst fuzeSpeed = 0.75;\r\nconst bombRadius = 30;\r\nconst knockBack = 50;\r\n\r\nexport function spawnBombs({ player,  bombs, score }) {\r\n  if (Math.random() * 100 <= score / 400 + 0.5) {\r\n    bombs.push(createPhysicsObject(Math.random() * 112 + 8, player.position.y - 300, 2));\r\n  }\r\n}\r\n\r\nexport function updateBombs(state) {\r\n  let bombsToExplode = [];\r\n  let remainingBombs = [];\r\n\r\n  // Update Bomb Timers\r\n  for (const bomb of state.bombs) {\r\n    if (bomb.timeLeft != undefined) {\r\n      // Reset Bomb Sprite\r\n      bomb.sprite = 2;\r\n      // Decrement timer\r\n      bomb.timeLeft -= 1;\r\n      if (bomb.timeLeft <= 0) {\r\n        // Halve next timer length\r\n        bomb.fuze = bomb.fuze * 0.75;\r\n        if (bomb.fuze < 1 && bomb.grounded) {\r\n          // Fuze finished. Explode\r\n          bombsToExplode.push(bomb);\r\n          continue;\r\n        } else {\r\n          // Not enough iterations yet. Flicker again\r\n          bomb.timeLeft = bomb.fuze;\r\n          bomb.sprite = 3;\r\n        }\r\n      }\r\n    } else if (bomb.grounded) {\r\n      // Start fuze since the bomb has hit the ground\r\n      bomb.timeLeft = fuzeTime;\r\n      bomb.fuze = fuzeTime;\r\n    }\r\n\r\n    // Preserve this bomb\r\n    remainingBombs.push(bomb);\r\n  }\r\n  // Preserve all remaining bombs\r\n  state.bombs = remainingBombs;\r\n\r\n  // Blog up bombs\r\n  let physicsObjects = getPhysicsObjects(state);\r\n  for (const bomb of bombsToExplode) {\r\n    cutTerrain(bomb.position.x, bomb.position.y, bombRadius, state.terrain);\r\n    newExplosion(bomb.position.x, bomb.position.y);\r\n\r\n    for (const object of physicsObjects) {\r\n      // Find the distance to the object\r\n      let dx = object.position.x - bomb.position.x;\r\n      let dy = object.position.y - bomb.position.y;\r\n      let length = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      // If the object is the player, and the length is less than 3/4 of the\r\n      // bomb radius, the player has lost.\r\n      if (object == state.player && length < bombRadius * 0.75) location.reload();\r\n\r\n      // Otherwise knockback the object by the distance * knockBack / length^2;\r\n      let lengthSquared = length * length;\r\n      object.position.x += dx * knockBack / lengthSquared;\r\n      object.position.y += dy * knockBack / lengthSquared;\r\n    }\r\n  }\r\n}\r\n","import { getPhysicsObjects } from \"./utils\";\r\nimport { clear, camera } from \"../canvasApi\";\r\n\r\nimport { handleInput } from \"./input\";\r\nimport * as updateFunctions from \"./update\";\r\nimport * as drawFunctions from \"./draw\";\r\nimport { updateTerrain, drawTerrain } from \"./terrain\";\r\nimport * as bombFunctions from \"./bombs\";\r\nimport { updateExplosions, drawExplosions } from \"./explosion\";\r\n\r\nimport { createPhysicsObject } from \"./utils\";\r\n\r\nexport const initialState = {\r\n  player: createPhysicsObject(20, 20, 0),\r\n  bombs: [],\r\n  explosions: [],\r\n  cameraY: 0,\r\n  score: 0\r\n};\r\n\r\nexport function update(state, input) {\r\n  let physicsObjects = getPhysicsObjects(state);\r\n\r\n  updateTerrain(state.cameraY);\r\n\r\n  updateFunctions.updatePhysicsObjects(physicsObjects);\r\n  updateFunctions.handleTerrainCollisions(state.terrain, physicsObjects);\r\n  updateFunctions.updateCamera(state);\r\n  updateFunctions.updateScore(state);\r\n\r\n  updateExplosions();\r\n\r\n  handleInput(input, state.player, state.terrain);\r\n\r\n  bombFunctions.spawnBombs(state);\r\n  bombFunctions.updateBombs(state);\r\n}\r\n\r\nexport function draw (state) {\r\n  let physicsObjects = getPhysicsObjects(state);\r\n  clear();\r\n  camera(0, Math.floor(state.cameraY));\r\n  drawTerrain(state.cameraY);\r\n  drawFunctions.drawPhysicsObjects(physicsObjects);\r\n  drawFunctions.drawScoreMarker(state);\r\n  drawFunctions.drawInstructions(state);\r\n  drawExplosions();\r\n  drawFunctions.drawScore(state);\r\n}\r\n","import {readFileSync} from 'fs';\r\n\r\nimport { initialState, draw, update } from \"./game/game\";\r\n\r\nlet currentKeys = new Set();\r\n\r\ndocument.addEventListener('keydown', (event) => {\r\n  currentKeys.add(event.key);\r\n  event.preventDefault();\r\n});\r\n\r\ndocument.addEventListener('keyup', (event) => {\r\n  currentKeys.delete(event.key);\r\n  event.preventDefault();\r\n});\r\n\r\nlet previousInput = {};\r\nlet state = initialState;\r\nfunction loop() {\r\n  let input = {};\r\n\r\n  let keyNames = {\r\n    \"up\": \"ArrowUp\",\r\n    \"right\": \"ArrowRight\",\r\n    \"down\": \"ArrowDown\",\r\n    \"left\": \"ArrowLeft\",\r\n    \"a\": \"a\",\r\n    \"b\": \"b\"\r\n  };\r\n\r\n  for (let key in keyNames) {\r\n    input[key] = currentKeys.has(keyNames[key]);\r\n    input[key + \"Pressed\"] = input[key] && !previousInput[key];\r\n    input[key + \"Released\"] = !input[key] && previousInput[key];\r\n  }\r\n  previousInput = input;\r\n\r\n  update(state, input);\r\n  draw(state);\r\n  requestAnimationFrame(loop);\r\n}\r\nrequestAnimationFrame(loop);\r\n"]}